import matplotlib.pyplot as plt
import pandas as pd
import numpy as np


source = [[2, 0], [1, 0], [1, 0], [0, 0], [1, 0], [1, 0], [4, 1], [2, 0], [0, 0], [2, 0], [3, 0], [1, 0], [1, 0], [1, 0], [3, 0], [1, 0], [1, 0], [0, 0], [1, 1], [5, 2], [2, 0], [3, 1], [3, 0], [1, 0], [2, 0], [1, 0], [1, 0], [1, 0], [2, 0], [2, 0], [1, 0], [1, 0], [1, 1], [1, 0], [2, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 0], [0, 0], [2, 0], [0, 0], [0, 2], [2, 1], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 0], [1, 0], [1, 2], [1, 1], [1, 0], [1, 0], [1, 2], [1, 1], [1, 0], [0, 0], [2, 0], [1, 0], [1, 0], [2, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [1, 1], [2, 0], [0, 0], [1, 0], [2, 3], [1, 2], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 0], [1, 0], [0, 2], [1, 0], [0, 1], [2, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 0], [2, 1], [1, 0], [2, 0], [0, 2], [0, 2], [1, 2], [1, 0], [1, 1], [1, 1], [1, 0], [1, 0], [2, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 1], [2, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [3, 0], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [0, 2], [1, 0], [1, 0], [3, 0], [0, 0], [1, 0], [1, 0], [2, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [2, 0], [2, 0], [2, 0], [1, 0], [1, 0], [2, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [1, 2], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [2, 0], [1, 0], [0, 0], [1, 0], [3, 0], [1, 0], [1, 0], [2, 0], [0, 1], [1, 0], [1, 0], [1, 0], [3, 0], [3, 0], [1, 0], [1, 0], [1, 0], [0, 1], [0, 0], [1, 0], [0, 2], [1, 0], [1, 0], [2, 0], [1, 0], [0, 0], [0, 1], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 1], [0, 0], [0, 0], [2, 1], [0, 0], [0, 1], [0, 3], [0, 2], [1, 1], [0, 0], [0, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 3], [2, 0], [1, 0], [1, 1], [0, 0], [0, 1], [0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [2, 0], [1, 1], [1, 0], [0, 0], [1, 0], [0, 1], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [0, 0], [0, 0], [3, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 1], [0, 1], [0, 1], [3, 0], [3, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 1], [2, 0], [0, 0], [1, 0], [2, 0], [1, 0], [0, 0], [2, 0], [0, 0], [2, 0], [1, 1], [0, 0], [2, 0], [2, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 0], [1, 0], [0, 2], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0], [2, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 1], [1, 0], [1, 0], [1, 0], [2, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, 1], [1, 0], [1, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 1], [1, 0], [2, 0], [1, 0], [0, 1], [1, 0], [0, 0], [2, 0], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, 0], [2, 0], [1, 0], [0, 0], [3, 0], [0, 0], [0, 1], [0, 0], [1, 0], [2, 0], [1, 0], [1, 0], [0, 0], [0, 2], [1, 1], [0, 2], [1, 0], [1, 0], [1, 1], [1, 0], [0, 0], [0, 0], [1, 1], [1, 0], [4, 0], [2, 0], [0, 0], [0, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [0, 2], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [0, 2], [1, 0], [1, 0], [0, 2], [0, 0], [0, 0], [2, 0], [1, 0], [1, 1], [3, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [3, 0], [2, 0], [0, 0], [2, 0], [0, 0], [0, 0], [1, 0], [0, 1], [2, 0], [1, 0], [0, 0], [0, 1], [1, 0], [1, 1], [0, 2], [0, 0], [1, 0], [1, 1], [1, 0], [0, 0], [0, 0], [1, 0], [0, 1], [0, 0], [1, 0], [0, 0], [0, 0], [1, 0], [3, 1], [1, 0], [0, 1], [0, 1], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 1], [1, 0], [1, 0], [1, 0], [1, 0], [0, 2], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [2, 0], [0, 2], [1, 0], [1, 0], [0, 0], [1, 2], [2, 0], [0, 0], [4, 0], [0, 2], [0, 0], [1, 0], [0, 0], [2, 0], [2, 0], [0, 1], [0, 0], [0, 0], [0, 2], [0, 1], [0, 0], [3, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 1], [1, 0], [2, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 1], [0, 0], [0, 1], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [1, 1], [0, 1], [0, 0], [1, 0], [0, 0], [1, 1], [2, 0], [2, 0], [3, 0], [1, 0], [1, 0], [0, 2], [0, 0], [3, 0], [1, 0], [1, 0], [0, 0], [0, 0], [3, 0], [0, 0], [0, 0], [0, 2], [0, 0], [0, 1], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 1], [0, 0], [1, 0], [1, 0], [0, 2], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 1], [1, 0], [1, 0], [0, 0], [1, 1], [0, 1], [0, 0], [1, 0], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [1, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 1], [1, 0], [1, 0], [0, 0], [1, 0], [1, 1], [3, 0], [0, 0], [0, 1], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [0, 3], [1, 0], [2, 0], [1, 0], [2, 0], [0, 2], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [0, 2], [1, 0], [3, 0], [2, 0], [0, 0], [0, 0], [4, 0], [1, 0], [1, 0], [2, 0], [2, 0], [0, 0], [0, 0], [0, 2], [3, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 0], [1, 0], [1, 0], [0, 1], [2, 0], [0, 2], [0, 0], [2, 0], [0, 1], [0, 0], [0, 2], [2, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, 0], [1, 0], [2, 0], [0, 0], [3, 0], [1, 0], [0, 0], [0, 0], [0, 1], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 1], [0, 0], [0, 0], [0, 0], [0, 0], [0, 3], [2, 0], [1, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 2], [1, 0], [1, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [1, 0], [2, 0], [1, 0], [0, 0], [0, 0], [0, 0], [2, 0], [4, 0], [0, 0], [2, 0], [2, 0], [1, 0], [1, 0], [1, 0], [0, 0], [2, 0], [1, 0], [0, 1], [0, 0], [1, 0], [0, 0], [0, 1], [1, 0], [1, 0], [1, 0], [2, 0], [2, 0], [1, 0], [2, 0], [2, 1], [2, 0], [0, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 1], [0, 2], [0, 2], [1, 0], [0, 1], [1, 0], [3, 0], [2, 0], [0, 0], [0, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 1], [1, 0], [1, 0], [1, 0], [2, 0], [2, 0], [1, 0], [2, 0], [2, 1], [2, 0], [0, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 1], [0, 2], [0, 2], [1, 0], [0, 1], [1, 0], [3, 0], [2, 0], [0, 0], [0, 0], [0, 1], [0, 0], [0, 0], [1, 0], [2, 0], [0, 1], [1, 0], [0, 0], [2, 0], [2, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [0, 0], [2, 0], [1, 0], [1, 0], [1, 0], [0, 0], [0, 1], [0, 2], [1, 0], [1, 0], [0, 0], [0, 0], [0, 1], [0, 0], [2, 0], [1, 2], [2, 0], [2, 0], [0, 0], [0, 0], [2, 0], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 1], [1, 0], [0, 0], [1, 0], [0, 0], [1, 0], [2, 0], [1, 0], [0, 1], [1, 0], [2, 0], [0, 0], [0, 2], [1, 0], [1, 0], [0, 0], [0, 1], [1, 1], [0, 0], [0, 2], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [1, 0], [1, 0], [2, 0], [0, 0], [0, 0], [0, 1], [0, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 1], [1, 0], [1, 0], [0, 1], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0]]



x=[]
y=[]
color = ['c', 'b', 'g', 'r', 'm', 'y', 'k', 'w']

hist = np.zeros((8, 8))

# dict rate_count
rate_count = {}
rate = []

#用for循环将文件中的值赋值给x，y
for i in range(len(source)):
    thisx = int(source[i][0])
    thisy = int(source[i][1])
    x.append(source[i][0])
    y.append(source[i][1])
    hist[thisx][thisy] += 1
    if thisx+thisy != 0:
        rate.append(thisx/(thisx+thisy))
        if thisx/(thisx+thisy) not in rate_count:
            rate_count[thisx/(thisx+thisy)]=1
        else:
            rate_count[thisx/(thisx+thisy)]+=1
#
# use only rate to draw the scatter shows the distribution of rate
plt.scatter(range(len(rate)), rate, c='r', marker='o')
plt.show()

#use rate_count to draw a histogram
print(rate_count)

#sort rate count by key and draw the histogram
rate_count = sorted(rate_count.items(), key=lambda x: x[0])
print(rate_count)
x = []
y = []
for i in range(len(rate_count)):
    # change x to string, keep 2 decimal
    x.append('%.2f' % rate_count[i][0])
    y.append(rate_count[i][1])
print(x)

print(y)

plt.bar(x, y)




plt.show()


#
#
print(hist)
#
# xedge = np.array([1,2,3,4,5,6,7,8,9])
# yedge = np.array([1,2,3,4,5,6,7,8,9])
#
# #生成图表对象。
# fig = plt.figure()
# #生成子图对象，类型为3d
# ax = fig.add_subplot(111,projection='3d')
#
# #设置作图点的坐标
# xpos, ypos = np.meshgrid(xedge[:-1]-2.5 , yedge[:-1]-2.5 )
# xpos = xpos.flatten('F')
# ypos = ypos.flatten('F')
# zpos = np.zeros_like(xpos)
#
# #设置柱形图大小
# dx =5 * np.ones_like(zpos)
# dy = dx.copy()
# dz = hist.flatten()
#
# #设置坐标轴标签
# ax.set_xlabel('R')
# ax.set_ylabel('K')
# ax.set_zlabel('Recall')
#
# # x, y, z: array - like
# # The coordinates of the anchor point of the bars.
# # dx, dy, dz: scalar or array - like
# # The width, depth, and height of the bars, respectively.
# # minx = np.min(x)
# # maxx = np.max(x + dx)
# # miny = np.min(y)
# # maxy = np.max(y + dy)
# # minz = np.min(z)
# # maxz = np.max(z + dz)
# ax.bar3d(xpos, ypos, zpos, dx, dy, dz,color='b',zsort='average')
#
# plt.show()